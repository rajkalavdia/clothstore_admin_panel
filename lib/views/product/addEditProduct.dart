import 'dart:async';
import 'dart:io';

import 'package:clothstore_admin_pannel/backend/controller/categoryController.dart';
import 'package:clothstore_admin_pannel/backend/controller/productsController.dart';
import 'package:clothstore_admin_pannel/backend/provider/categoryProvider.dart';
import 'package:clothstore_admin_pannel/backend/provider/productProvider.dart';
import 'package:clothstore_admin_pannel/model/categoryModel.dart';
import 'package:clothstore_admin_pannel/model/productModel.dart';
import 'package:clothstore_admin_pannel/utils/autoGeneratedUID.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import 'package:image_picker/image_picker.dart';
import 'package:modal_progress_hud_nsn/modal_progress_hud_nsn.dart';
import 'package:provider/provider.dart';

class AddEditProduct extends StatefulWidget {
  static const String routeName = "/AddEditProduct";

  const AddEditProduct({super.key});

  @override
  State<AddEditProduct> createState() => _AddEditProductState();
}

class _AddEditProductState extends State<AddEditProduct> {
  final GlobalKey<FormState> _fromKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _priceController = TextEditingController();
  final _colorController = TextEditingController();

  // for checkBox
  bool isChecked = false;
  List<String> productSizeList = [];
  List<Map<String, dynamic>> productSizes = [
    {"value": false, "title": "XS"},
    {"value": false, "title": "S"},
    {"value": false, "title": "M"},
    {"value": false, "title": "L"},
    {"value": false, "title": "XL"},
    {"value": false, "title": "XXL"},
    {"value": false, "title": "3XL"},
    {"value": false, "title": "4XL"},
    {"value": false, "title": "5XL"},
  ];
  List productSizesForShoes = [
    {"value": false, "title": "6"},
    {"value": false, "title": "7"},
    {"value": false, "title": "8"},
    {"value": false, "title": "9"},
    {"value": false, "title": "10"},
    {"value": false, "title": "11"},
    {"value": false, "title": "12"},
    {"value": false, "title": "13"},
  ];

  ProductProvider productProvider = ProductProvider();
  CategoryProvider categoryProvider = CategoryProvider();

  CategoryModel dropDownSelectedCategory = CategoryModel();

  List<dynamic> productImagesList = [];
  List<String> imageURL = [];
  List<String> hashCodeColor = [];

  // List<String> productSizeList = [];

  bool isLoading = false;

  Color pickedColor = Colors.white;

  ProductModel editProduct = ProductModel();

  Future<void> uploadProductImages() async {
    final XFile? pickedImage = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedImage == null) return;
    File imageFile = File(pickedImage.path);
    final Uint8List image = await imageFile.readAsBytes();
    productImagesList.add(image);

    if (mounted) setState(() {});
  }

  Future<void> updateProductModel() async {
    setState(() {
      isLoading = true;
    });

    String newId = await AutoGeneratedUID().getAutogeneratedUIDForProduct();

    for (var element in productImagesList) {
      if (element is Uint8List) {
        String fileName = DateTime.now().millisecondsSinceEpoch.toString();
        final ref = FirebaseStorage.instance.ref().child('products/$newId/$fileName');

        // Upload file
        UploadTask uploadTask = ref.putData(element);
        TaskSnapshot snapshot = await uploadTask;

        // Get download URL
        String downloadUrl = await snapshot.ref.getDownloadURL();

        print("downloadUrl while uploading: $downloadUrl");

        imageURL.add(downloadUrl);
      }
    }

    print("imagUrls before setting in model:$imageURL");

    ProductModel updateProductModel = ProductModel(
      productId: newId,
      productImages: imageURL,
      brandName: _nameController.text.trim(),
      productSize: productSizeList,
      productColor: hashCodeColor,
      productCategory: dropDownSelectedCategory.categoryName,
      productDescription: _descriptionController.text.trim(),
      productPrice: double.tryParse(_priceController.text)!,
    );

    print("updateProductModel: ${updateProductModel.toString()}");

    await ProductController().uploadProductFirebase(updateProductModel);

    print('provider product list : ${productProvider.productModelList}');
    print('provider product list : ${productProvider.productModelList.length}');
    print("imageUrl : $imageURL");
    setState(() {
      isLoading = false;
    });
  }

  void getPreFillValues() {
    setState(() {
      isLoading = true;
    });
    final productModelArgs = ModalRoute.of(context)!.settings.arguments as Map<String, ProductModel>;
    editProduct = productModelArgs['productModel']!;
    print('productProvider.isEdit : ${productProvider.isEdit}');
    print('editProduct.productImages :${editProduct.productImages}');
    productImagesList = editProduct.productImages;
    _nameController.text = editProduct.brandName;
    // dropDownSelectedCategory.categoryName = editProduct.productCategory;

    CategoryModel foundCategory = categoryProvider.categoryList.firstWhere(
      (category) {
        print('Comparing: "${editProduct.productCategory}" with "${category.categoryName}"');
        return editProduct.productCategory.toLowerCase() == category.categoryName.toLowerCase();
      },
      orElse: () => CategoryModel(),
    );
    dropDownSelectedCategory = foundCategory;

    print("edit product product sizes  : ${editProduct.productSize}");
    for (var size in productSizes) {
      size["value"] = editProduct.productSize.contains(size["title"]);
    }
    hashCodeColor = editProduct.productColor;
    _descriptionController.text = editProduct.productDescription;
    _priceController.text = "${editProduct.productPrice}";
    setState(() {
      isLoading = false;
    });
  }

  @override
  void initState() {
    super.initState();
    productProvider = context.read<ProductProvider>();
    categoryProvider = context.read<CategoryProvider>();

    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await CategoryController().getCategoryFirebase(categoryProvider);

      if (productProvider.isEdit == true) {
        getPreFillValues();
      } else {
        setState(() {
          dropDownSelectedCategory = categoryProvider.categoryList.first;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return ModalProgressHUD(
      inAsyncCall: isLoading,
      child: SafeArea(
        child: Scaffold(
          body: SingleChildScrollView(
            child: Form(
              key: _fromKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  getHeader(),
                  getAddImagesWidget(),
                  getProductBrandNameWidget(),
                  getProductCategoryWidget(),
                  getProductSizeWidget(),
                  getProductColorWidget(),
                  getProductDescriptionWidget(),
                  getProductPriceWidget(),
                  getAddButtonWidget(),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget getHeader() {
    return Row(
      children: [
        IconButton(
          onPressed: () {
            Navigator.pop(context);
          },
          icon: Icon(
            Icons.arrow_back_ios_new_rounded,
          ),
        ),
        Text(
          "Add Product",
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
      ],
    );
  }

  Widget getAddImagesWidget() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10),
          child: Text(
            "Add Images*",
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w500,
              color: Colors.red[900],
            ),
          ),
        ),
        Row(
          children: [
            if (productImagesList.length < 10)
              InkWell(
                onTap: () async {
                  await uploadProductImages();
                  setState(() {});
                },
                child: Container(
                  height: 100,
                  width: 100,
                  margin: EdgeInsets.symmetric(horizontal: 10),
                  decoration: BoxDecoration(color: Colors.black, borderRadius: BorderRadius.circular(10)),
                  child: Icon(
                    Icons.add_rounded,
                    color: Colors.white,
                  ),
                ),
              ),
            Flexible(
              child: Container(
                height: 100,
                child: ListView.builder(
                  shrinkWrap: true,
                  reverse: true,
                  physics: ScrollPhysics(parent: BouncingScrollPhysics()),
                  itemCount: productImagesList.length,
                  scrollDirection: Axis.horizontal,
                  itemBuilder: (context, int index) {
                    final _model = productImagesList[index];
                    return Stack(
                      children: [
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 5),
                          child: SizedBox(
                            child: (productProvider.isEdit == true)
                                ? Image.network(
                                    _model,
                                  )
                                : Image.memory(_model),
                          ),
                        ),
                        Positioned(
                          top: -1,
                          right: 0,
                          child: InkWell(
                            onTap: () {
                              productImagesList.removeAt(index);
                              setState(() {});
                            },
                            child: Container(
                              height: 20,
                              width: 20,
                              decoration: BoxDecoration(
                                color: Colors.red,
                                borderRadius: BorderRadius.circular(30),
                              ),
                              child: Icon(
                                Icons.close,
                                color: Colors.white,
                                size: 15,
                              ),
                            ),
                          ),
                        ),
                      ],
                    );
                  },
                ),
              ),
            )
          ],
        ),
      ],
    );
  }

  Widget getProductBrandNameWidget() {
    return Padding(
      padding: const EdgeInsets.fromLTRB(10, 15, 10, 0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Brand Name*",
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          TextFormField(
            style: TextStyle(
              color: Colors.black,
              fontSize: 18,
            ),
            validator: (String? value) {
              if (value == null || value.isEmpty) {
                return "please Enter the Name!";
              }
              return null;
            },
            controller: _nameController,
            cursorColor: Colors.black,
            decoration: InputDecoration(
              focusedBorder: OutlineInputBorder(
                borderSide: BorderSide(
                  color: Colors.black,
                  width: 1.5,
                ),
                borderRadius: BorderRadius.circular(10),
              ),
              border: OutlineInputBorder(
                borderSide: BorderSide(
                  color: Colors.black,
                  width: 1,
                ),
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget getProductCategoryWidget() {
    return Padding(
      padding: const EdgeInsets.fromLTRB(10, 15, 10, 0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Category*",
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          Container(
            height: 50,
            decoration: BoxDecoration(
              border: Border.fromBorderSide(
                BorderSide(width: 1, color: Colors.black54),
              ),
              borderRadius: BorderRadius.circular(
                10,
              ),
            ),
            child: DropdownButton<CategoryModel>(
              value: dropDownSelectedCategory,
              onChanged: (CategoryModel? newValue) {
                setState(() {
                  dropDownSelectedCategory = newValue!;
                });
              },
              icon: Icon(
                Icons.arrow_circle_down_rounded,
                color: Colors.black,
                size: 25,
              ),
              underline: const SizedBox.shrink(),
              items: categoryProvider.categoryList.map<DropdownMenuItem<CategoryModel>>((CategoryModel category) {
                return DropdownMenuItem<CategoryModel>(
                  value: category,
                  child: Row(
                    children: [
                      Container(
                        height: 30,
                        width: 30,
                        margin: EdgeInsets.symmetric(horizontal: 5, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(40),
                        ),
                        child: ClipOval(
                          child: Image.network(
                            category.categoryImageUrl,
                            fit: BoxFit.contain,
                          ),
                        ),
                      ),
                      Text(
                        category.categoryName,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                          color: Colors.black,
                        ),
                      ),
                    ],
                  ),
                );
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget getProductSizeWidget() {
    return Visibility(
      visible: dropDownSelectedCategory.categoryName != "watch",
      child: Padding(
        padding: const EdgeInsets.fromLTRB(10, 15, 10, 0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Size*",
              style: TextStyle(
                fontWeight: FontWeight.bold,
              ),
            ),
            (dropDownSelectedCategory.categoryName == "shoes")
                ? SizedBox(
                    // height: 380,
                    child: ListView.builder(
                        shrinkWrap: true,
                        itemCount: productSizesForShoes.length,
                        scrollDirection: Axis.vertical,
                        physics: NeverScrollableScrollPhysics(),
                        itemBuilder: (context, int index) {
                          final size = productSizesForShoes[index];
                          return Row(
                            children: [
                              Checkbox(
                                value: size["value"], // (editProduct!.productSize.isEmpty)?
                                checkColor: Colors.white,
                                onChanged: (bool? value) {
                                  setState(() {
                                    size["value"] = value;
                                    if (productSizeList.contains(size["title"])) {
                                      productSizeList.remove(size["title"]);
                                    } else {
                                      productSizeList.add(size["title"]);
                                    }
                                  });
                                },
                              ),
                              Text(
                                "${size["title"]}",
                                style: TextStyle(
                                  color: Colors.black,
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          );
                        }),
                  )
                : SizedBox(
                    height: 440,
                    child: ListView.builder(
                        shrinkWrap: true,
                        itemCount: productSizes.length,
                        scrollDirection: Axis.vertical,
                        physics: NeverScrollableScrollPhysics(),
                        itemBuilder: (context, int index) {
                          final size = productSizes[index];
                          return Row(
                            children: [
                              Checkbox(
                                value: size["value"],
                                checkColor: Colors.white,
                                onChanged: (bool? value) {
                                  setState(() {
                                    size["value"] = value;
                                    if (productSizeList.contains(size["title"])) {
                                      productSizeList.remove(size["title"]);
                                    } else {
                                      productSizeList.add(size["title"]);
                                    }
                                  });
                                },
                              ),
                              Text(
                                "${size["title"]}",
                                style: TextStyle(
                                  color: Colors.black,
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          );
                        }),
                  ),
          ],
        ),
      ),
    );
  }

  Widget getProductColorWidget() {
    return Padding(
      padding: const EdgeInsets.fromLTRB(10, 15, 10, 0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Color*",
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          Row(
            children: [
              Expanded(
                child: Container(
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.black54),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: ListView.builder(
                    itemCount: hashCodeColor.length,
                    shrinkWrap: true,
                    itemBuilder: (context, int index) {
                      final _color = hashCodeColor[index];
                      return Row(
                        children: [
                          Container(
                            height: 45,
                            width: 45,
                            margin: EdgeInsets.symmetric(horizontal: 5, vertical: 2),
                            decoration: BoxDecoration(
                              color: Color(int.tryParse(_color)!),
                              borderRadius: BorderRadius.circular(5),
                            ),
                          ),
                          Expanded(
                            child: Text(
                              _color,
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 20,
                              ),
                            ),
                          ),
                          IconButton(
                            onPressed: () {
                              setState(() {
                                hashCodeColor.remove(_color);
                              });
                            },
                            icon: Icon(
                              Icons.close_rounded,
                              color: Colors.black,
                              size: 15,
                            ),
                          ),
                        ],
                      );
                    },
                  ),
                ),
              ),
              IconButton(
                onPressed: () {
                  showDialog(
                    context: context,
                    builder: (context) {
                      return AlertDialog(
                        scrollable: true,
                        title: Text("Pick Color"),
                        content: ColorPicker(
                          onColorChanged: (Color color) {
                            setState(() {
                              pickedColor = color;
                            });
                          },
                          pickerColor: pickedColor,
                          hexInputBar: true,
                          hexInputController: _colorController,
                        ),
                        actions: [
                          TextButton(
                            onPressed: () {
                              Navigator.pop(context);
                            },
                            child: Text(
                              "No",
                            ),
                          ),
                          TextButton(
                            onPressed: () {
                              setState(() {
                                hashCodeColor.add("0xff${_colorController.text.trim().toString()}");
                              });
                              Navigator.pop(context);
                            },
                            child: Text(
                              "Yes",
                            ),
                          ),
                        ],
                      );
                    },
                  );
                },
                icon: Icon(
                  Icons.colorize_rounded,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget getProductDescriptionWidget() {
    return Padding(
      padding: const EdgeInsets.fromLTRB(10, 15, 10, 0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Description*",
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          TextFormField(
            style: TextStyle(
              color: Colors.black,
              fontSize: 18,
            ),
            validator: (String? value) {
              if (value == null || value.isEmpty) {
                return "please Enter the Description!";
              }
              return null;
            },
            controller: _descriptionController,
            cursorColor: Colors.black,
            decoration: InputDecoration(
              focusedBorder: OutlineInputBorder(
                borderSide: BorderSide(
                  color: Colors.black,
                  width: 1.5,
                ),
                borderRadius: BorderRadius.circular(10),
              ),
              border: OutlineInputBorder(
                  borderSide: BorderSide(
                    color: Colors.black,
                    width: 1,
                  ),
                  borderRadius: BorderRadius.circular(10)),
            ),
          ),
        ],
      ),
    );
  }

  Widget getProductPriceWidget() {
    return Padding(
      padding: const EdgeInsets.fromLTRB(10, 15, 10, 0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Price*",
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          TextFormField(
            style: TextStyle(
              color: Colors.black,
              fontSize: 18,
            ),
            validator: (String? value) {
              if (value == null || value.isEmpty) {
                return "please Enter the Price!";
              }
              return null;
            },
            controller: _priceController,
            keyboardType: TextInputType.number,
            inputFormatters: [FilteringTextInputFormatter.digitsOnly],
            cursorColor: Colors.black,
            decoration: InputDecoration(
              focusedBorder: OutlineInputBorder(
                borderSide: BorderSide(color: Colors.black, width: 1.5),
                borderRadius: BorderRadius.circular(10),
              ),
              border: OutlineInputBorder(
                  borderSide: BorderSide(
                    color: Colors.black,
                    width: 1,
                  ),
                  borderRadius: BorderRadius.circular(10)),
            ),
          ),
        ],
      ),
    );
  }

  Widget getAddButtonWidget() {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          InkWell(
            onTap: () async {
              FocusScope.of(context).unfocus();

              // Check form validation first
              if (!_fromKey.currentState!.validate()) {
                return; // Stop if form validation fails
              }

              // Check for product images
              if (productImagesList.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Center(child: Text("You forgot to add the photos!")),
                    behavior: SnackBarBehavior.floating,
                    backgroundColor: Colors.red,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(30),
                    ),
                  ),
                );
                return;
              }

              // Check for product sizes
              if (productSizeList.isEmpty && dropDownSelectedCategory.categoryName != "watch") {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                  content: Center(child: Text("You forgot to add the product size!")),
                  behavior: SnackBarBehavior.floating,
                  backgroundColor: Colors.red,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ));
                return;
              }

              // Check for product colors
              if (hashCodeColor.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                  content: Center(child: Text("You forgot to add the product color!")),
                  behavior: SnackBarBehavior.floating,
                  backgroundColor: Colors.red,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ));
                return;
              }

              // All validations passed, update the product
              // productSizeList = List.from(multipleSelected);
              await updateProductModel();
              productProvider.resetPagination();
              await ProductController().getProductFromFirebase(productProvider);

              // Show success message
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                content: Text("Product added successfully!"),
                behavior: SnackBarBehavior.floating,
                backgroundColor: Colors.green,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ));

              Navigator.pop(context);
            },
            child: Container(
              height: 55,
              width: 200,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(40),
                color: Colors.grey[900],
              ),
              child: Center(
                child: Text(
                  "Add",
                  style: TextStyle(fontSize: 15, color: Colors.white, fontWeight: FontWeight.bold),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
