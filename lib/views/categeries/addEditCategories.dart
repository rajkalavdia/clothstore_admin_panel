import 'dart:io';

import 'package:clothstore_admin_pannel/backend/controller/categoryController.dart';
import 'package:clothstore_admin_pannel/backend/provider/categoryProvider.dart';
import 'package:clothstore_admin_pannel/model/categoryModel.dart';
import 'package:clothstore_admin_pannel/utils/autoGeneratedUID.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:modal_progress_hud_nsn/modal_progress_hud_nsn.dart';
import 'package:provider/provider.dart';

class AddEditCategories extends StatefulWidget {
  static const String routeName = "/AddEditCategories";

  const AddEditCategories({super.key});

  @override
  State<AddEditCategories> createState() => _AddEditCategoriesState();
}

class _AddEditCategoriesState extends State<AddEditCategories> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final _categoryNameController = TextEditingController();

  CategoryProvider categoryProvider = CategoryProvider();
  bool isLoading = false;

  dynamic imagesInScreen;
  String imageUrl = "";
  File? imageFile;

  Future<void> uploadImage() async {
    XFile? selectedImage = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (selectedImage != null) {
      imageFile = File(selectedImage.path);
      imagesInScreen = await imageFile!.readAsBytes();

      if (mounted) setState(() {});
    }
  }

  Future<void> uploadImageStorage() async {
    setState(() {
      isLoading = true;
    });
    String newId = await AutoGeneratedUID().getAutogeneratedUIDForCategories();
    // String fileName = DateTime.now().millisecondsSinceEpoch.toString();
    final ref = FirebaseStorage.instance.ref().child('categories/${_categoryNameController.text.trim()}/$newId');

    UploadTask uploadTask = ref.putFile(imageFile!);
    TaskSnapshot snapshot = await uploadTask;

    imageUrl = await snapshot.ref.getDownloadURL();

    CategoryModel newCategoryModel = CategoryModel(
      categoryName: _categoryNameController.text.toLowerCase().trim(),
      categoryUid: newId,
      categoryImageUrl: imageUrl,
    );

    // PropertyModel propertyModel = PropertyModel(
    //   categories: {
    //     newId : newCategoryModel,
    //   }
    // );

    print(" category imageUrl : $imageUrl");
    print(" _categoryNameController.text : ${_categoryNameController.text}");
    await CategoryController().setCategoryFirebase(newCategoryModel);

    setState(() {
      isLoading = false;
    });
  }

  void getPrefillValues() {
    if (categoryProvider.editCategory == true) {
      final categoryArgs = ModalRoute.of(context)!.settings.arguments as Map<String, CategoryModel>;
      final preCategory = categoryArgs["categoryModel"];

      if (preCategory != null) {
        setState(() {
          _categoryNameController.text = preCategory.categoryName;
          imageUrl = preCategory.categoryImageUrl;
        });
      }
    }
  }

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      categoryProvider = Provider.of<CategoryProvider>(context, listen: false);
      getPrefillValues();
    });
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: ModalProgressHUD(
        inAsyncCall: isLoading,
        child: Scaffold(
          body: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              getHeader(context),
              addCategoryPhoto(),
              getCategoryName(),
              getAddButton(),
            ],
          ),
        ),
      ),
    );
  }

  Widget getHeader(BuildContext context) {
    return Row(
      children: [
        IconButton(
          onPressed: () {
            Navigator.pop(context);
          },
          icon: Icon(
            Icons.arrow_back_ios_new_rounded,
          ),
        ),
        Text(
          "Add Category",
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
      ],
    );
  }

  Widget addCategoryPhoto() {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 10),
          child: Text(
            "Add Image*",
            style: TextStyle(
              color: Colors.red[900],
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Stack(
          children: [
            (categoryProvider.editCategory == true && imageUrl != "")
                ? Container(
                    height: 100,
                    width: 100,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(10),
                      child: Image.network(
                        imageUrl,
                        fit: BoxFit.contain,
                      ),
                    ),
                  )
                : (imagesInScreen == null)
                    ? InkWell(
                        onTap: () async {
                          await uploadImage();
                          // setState(() {});
                        },
                        child: Container(
                          height: 100,
                          width: 100,
                          decoration: BoxDecoration(
                            color: Colors.black,
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Icon(
                            Icons.add_rounded,
                            color: Colors.white,
                          ),
                        ),
                      )
                    : Container(
                        height: 100,
                        width: 100,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(10),
                          child: Image.memory(
                            imagesInScreen,
                            fit: BoxFit.contain,
                          ),
                        ),
                      ),
            if (imageUrl != "")
              Positioned(
                right: 3,
                top: -1,
                child: InkWell(
                  onTap: () {
                    setState(() {
                      imageUrl = "";
                    });
                  },
                  child: Container(
                    height: 20,
                    width: 20,
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(30),
                    ),
                    child: Icon(
                      Icons.close_rounded,
                      color: Colors.white,
                      size: 10,
                    ),
                  ),
                ),
              ),
            if (imagesInScreen != null)
              Positioned(
                right: 3,
                top: -1,
                child: InkWell(
                  onTap: () {
                    setState(() {
                      setState(() {
                        imagesInScreen = null;
                      });
                    });
                  },
                  child: Container(
                    height: 20,
                    width: 20,
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(30),
                    ),
                    child: Icon(
                      Icons.close_rounded,
                      color: Colors.white,
                      size: 10,
                    ),
                  ),
                ),
              ),
          ],
        ),
      ],
    );
  }

  Widget getCategoryName() {
    return Padding(
      padding: const EdgeInsets.only(left: 10, top: 20, right: 10),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Category Name*",
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          Form(
            key: _formKey,
            child: TextFormField(
              style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
              controller: _categoryNameController,
              decoration: InputDecoration(
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: BorderSide(color: Colors.black, width: 1.5),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15),
                  borderSide: BorderSide(color: Colors.black, width: 1.5),
                ),
              ),
              cursorColor: Colors.black,
              validator: (String? value) {
                if (value == null || value.isEmpty) {
                  return "Please Enter Category Name";
                }
                return null;
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget getAddButton() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        InkWell(
          onTap: () async {
            FocusScope.of(context).unfocus();
            if (_formKey.currentState!.validate()) {
              await uploadImageStorage();
              categoryProvider.categoryList.clear();
              await CategoryController().getCategoryFirebase(categoryProvider);
              Navigator.pop(context, true);
            }
          },
          child: Container(
            height: 55,
            width: 100,
            margin: EdgeInsets.symmetric(vertical: 10),
            decoration: BoxDecoration(
              color: Colors.grey[900],
              borderRadius: BorderRadius.circular(30),
            ),
            child: Center(
              child: Text(
                "Add",
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
            ),
          ),
        ),
      ],
    );
  }
}
